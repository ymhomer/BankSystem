'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="BankDB")>  _
Partial Public Class BankDBDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertAccount(instance As Account)
    End Sub
  Partial Private Sub UpdateAccount(instance As Account)
    End Sub
  Partial Private Sub DeleteAccount(instance As Account)
    End Sub
  Partial Private Sub InsertCustomer(instance As Customer)
    End Sub
  Partial Private Sub UpdateCustomer(instance As Customer)
    End Sub
  Partial Private Sub DeleteCustomer(instance As Customer)
    End Sub
  Partial Private Sub InsertLoan(instance As Loan)
    End Sub
  Partial Private Sub UpdateLoan(instance As Loan)
    End Sub
  Partial Private Sub DeleteLoan(instance As Loan)
    End Sub
  Partial Private Sub InsertPayment(instance As Payment)
    End Sub
  Partial Private Sub UpdatePayment(instance As Payment)
    End Sub
  Partial Private Sub DeletePayment(instance As Payment)
    End Sub
  Partial Private Sub InsertStaff(instance As Staff)
    End Sub
  Partial Private Sub UpdateStaff(instance As Staff)
    End Sub
  Partial Private Sub DeleteStaff(instance As Staff)
    End Sub
  Partial Private Sub InsertTransactionH(instance As TransactionH)
    End Sub
  Partial Private Sub UpdateTransactionH(instance As TransactionH)
    End Sub
  Partial Private Sub DeleteTransactionH(instance As TransactionH)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.BankSystem.My.MySettings.Default.BankDBConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Accounts() As System.Data.Linq.Table(Of Account)
		Get
			Return Me.GetTable(Of Account)
		End Get
	End Property
	
	Public ReadOnly Property Customers() As System.Data.Linq.Table(Of Customer)
		Get
			Return Me.GetTable(Of Customer)
		End Get
	End Property
	
	Public ReadOnly Property Loans() As System.Data.Linq.Table(Of Loan)
		Get
			Return Me.GetTable(Of Loan)
		End Get
	End Property
	
	Public ReadOnly Property Payments() As System.Data.Linq.Table(Of Payment)
		Get
			Return Me.GetTable(Of Payment)
		End Get
	End Property
	
	Public ReadOnly Property Staffs() As System.Data.Linq.Table(Of Staff)
		Get
			Return Me.GetTable(Of Staff)
		End Get
	End Property
	
	Public ReadOnly Property TransactionHs() As System.Data.Linq.Table(Of TransactionH)
		Get
			Return Me.GetTable(Of TransactionH)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Account")>  _
Partial Public Class Account
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _accountID As String
	
	Private _description As String
	
	Private _balance As System.Nullable(Of Decimal)
	
	Private _Customers As EntitySet(Of Customer)
	
	Private _Loans As EntitySet(Of Loan)
	
	Private _TransactionHs As EntitySet(Of TransactionH)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnaccountIDChanging(value As String)
    End Sub
    Partial Private Sub OnaccountIDChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub OnbalanceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnbalanceChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Customers = New EntitySet(Of Customer)(AddressOf Me.attach_Customers, AddressOf Me.detach_Customers)
		Me._Loans = New EntitySet(Of Loan)(AddressOf Me.attach_Loans, AddressOf Me.detach_Loans)
		Me._TransactionHs = New EntitySet(Of TransactionH)(AddressOf Me.attach_TransactionHs, AddressOf Me.detach_TransactionHs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="VarChar(6) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property accountID() As String
		Get
			Return Me._accountID
		End Get
		Set
			If (String.Equals(Me._accountID, value) = false) Then
				Me.OnaccountIDChanging(value)
				Me.SendPropertyChanging
				Me._accountID = value
				Me.SendPropertyChanged("accountID")
				Me.OnaccountIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="VarChar(50)")>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_balance", DbType:="Decimal(7,2)")>  _
	Public Property balance() As System.Nullable(Of Decimal)
		Get
			Return Me._balance
		End Get
		Set
			If (Me._balance.Equals(value) = false) Then
				Me.OnbalanceChanging(value)
				Me.SendPropertyChanging
				Me._balance = value
				Me.SendPropertyChanged("balance")
				Me.OnbalanceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Account_Customer", Storage:="_Customers", ThisKey:="accountID", OtherKey:="accountID")>  _
	Public Property Customers() As EntitySet(Of Customer)
		Get
			Return Me._Customers
		End Get
		Set
			Me._Customers.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Account_Loan", Storage:="_Loans", ThisKey:="accountID", OtherKey:="accountID")>  _
	Public Property Loans() As EntitySet(Of Loan)
		Get
			Return Me._Loans
		End Get
		Set
			Me._Loans.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Account_TransactionH", Storage:="_TransactionHs", ThisKey:="accountID", OtherKey:="accountID")>  _
	Public Property TransactionHs() As EntitySet(Of TransactionH)
		Get
			Return Me._TransactionHs
		End Get
		Set
			Me._TransactionHs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Customers(ByVal entity As Customer)
		Me.SendPropertyChanging
		entity.Account = Me
	End Sub
	
	Private Sub detach_Customers(ByVal entity As Customer)
		Me.SendPropertyChanging
		entity.Account = Nothing
	End Sub
	
	Private Sub attach_Loans(ByVal entity As Loan)
		Me.SendPropertyChanging
		entity.Account = Me
	End Sub
	
	Private Sub detach_Loans(ByVal entity As Loan)
		Me.SendPropertyChanging
		entity.Account = Nothing
	End Sub
	
	Private Sub attach_TransactionHs(ByVal entity As TransactionH)
		Me.SendPropertyChanging
		entity.Account = Me
	End Sub
	
	Private Sub detach_TransactionHs(ByVal entity As TransactionH)
		Me.SendPropertyChanging
		entity.Account = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Customer")>  _
Partial Public Class Customer
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _custID As String
	
	Private _custName As String
	
	Private _userName As String
	
	Private _password As String
	
	Private _address As String
	
	Private _phone As String
	
	Private _email As String
	
	Private _salary As System.Nullable(Of Decimal)
	
	Private _accountID As String
	
	Private _Payments As EntitySet(Of Payment)
	
	Private _Account As EntityRef(Of Account)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OncustIDChanging(value As String)
    End Sub
    Partial Private Sub OncustIDChanged()
    End Sub
    Partial Private Sub OncustNameChanging(value As String)
    End Sub
    Partial Private Sub OncustNameChanged()
    End Sub
    Partial Private Sub OnuserNameChanging(value As String)
    End Sub
    Partial Private Sub OnuserNameChanged()
    End Sub
    Partial Private Sub OnpasswordChanging(value As String)
    End Sub
    Partial Private Sub OnpasswordChanged()
    End Sub
    Partial Private Sub OnaddressChanging(value As String)
    End Sub
    Partial Private Sub OnaddressChanged()
    End Sub
    Partial Private Sub OnphoneChanging(value As String)
    End Sub
    Partial Private Sub OnphoneChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    Partial Private Sub OnsalaryChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnsalaryChanged()
    End Sub
    Partial Private Sub OnaccountIDChanging(value As String)
    End Sub
    Partial Private Sub OnaccountIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Payments = New EntitySet(Of Payment)(AddressOf Me.attach_Payments, AddressOf Me.detach_Payments)
		Me._Account = CType(Nothing, EntityRef(Of Account))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_custID", DbType:="VarChar(6) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property custID() As String
		Get
			Return Me._custID
		End Get
		Set
			If (String.Equals(Me._custID, value) = false) Then
				Me.OncustIDChanging(value)
				Me.SendPropertyChanging
				Me._custID = value
				Me.SendPropertyChanged("custID")
				Me.OncustIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_custName", DbType:="VarChar(30)")>  _
	Public Property custName() As String
		Get
			Return Me._custName
		End Get
		Set
			If (String.Equals(Me._custName, value) = false) Then
				Me.OncustNameChanging(value)
				Me.SendPropertyChanging
				Me._custName = value
				Me.SendPropertyChanged("custName")
				Me.OncustNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="VarChar(30)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me.OnuserNameChanging(value)
				Me.SendPropertyChanging
				Me._userName = value
				Me.SendPropertyChanged("userName")
				Me.OnuserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_password", DbType:="VarChar(20)")>  _
	Public Property password() As String
		Get
			Return Me._password
		End Get
		Set
			If (String.Equals(Me._password, value) = false) Then
				Me.OnpasswordChanging(value)
				Me.SendPropertyChanging
				Me._password = value
				Me.SendPropertyChanged("password")
				Me.OnpasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_address", DbType:="VarChar(40)")>  _
	Public Property address() As String
		Get
			Return Me._address
		End Get
		Set
			If (String.Equals(Me._address, value) = false) Then
				Me.OnaddressChanging(value)
				Me.SendPropertyChanging
				Me._address = value
				Me.SendPropertyChanged("address")
				Me.OnaddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_phone", DbType:="VarChar(20)")>  _
	Public Property phone() As String
		Get
			Return Me._phone
		End Get
		Set
			If (String.Equals(Me._phone, value) = false) Then
				Me.OnphoneChanging(value)
				Me.SendPropertyChanging
				Me._phone = value
				Me.SendPropertyChanged("phone")
				Me.OnphoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="VarChar(30)")>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_salary", DbType:="Decimal(7,2)")>  _
	Public Property salary() As System.Nullable(Of Decimal)
		Get
			Return Me._salary
		End Get
		Set
			If (Me._salary.Equals(value) = false) Then
				Me.OnsalaryChanging(value)
				Me.SendPropertyChanging
				Me._salary = value
				Me.SendPropertyChanged("salary")
				Me.OnsalaryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="VarChar(6)")>  _
	Public Property accountID() As String
		Get
			Return Me._accountID
		End Get
		Set
			If (String.Equals(Me._accountID, value) = false) Then
				If Me._Account.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnaccountIDChanging(value)
				Me.SendPropertyChanging
				Me._accountID = value
				Me.SendPropertyChanged("accountID")
				Me.OnaccountIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_Payment", Storage:="_Payments", ThisKey:="custID", OtherKey:="custID")>  _
	Public Property Payments() As EntitySet(Of Payment)
		Get
			Return Me._Payments
		End Get
		Set
			Me._Payments.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Account_Customer", Storage:="_Account", ThisKey:="accountID", OtherKey:="accountID", IsForeignKey:=true)>  _
	Public Property Account() As Account
		Get
			Return Me._Account.Entity
		End Get
		Set
			Dim previousValue As Account = Me._Account.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Account.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Account.Entity = Nothing
					previousValue.Customers.Remove(Me)
				End If
				Me._Account.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Customers.Add(Me)
					Me._accountID = value.accountID
				Else
					Me._accountID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Account")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Payments(ByVal entity As Payment)
		Me.SendPropertyChanging
		entity.Customer = Me
	End Sub
	
	Private Sub detach_Payments(ByVal entity As Payment)
		Me.SendPropertyChanging
		entity.Customer = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Loan")>  _
Partial Public Class Loan
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _loanID As String
	
	Private _loanType As String
	
	Private _amountBorrowed As System.Nullable(Of Decimal)
	
	Private _accountID As String
	
	Private _Account As EntityRef(Of Account)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnloanIDChanging(value As String)
    End Sub
    Partial Private Sub OnloanIDChanged()
    End Sub
    Partial Private Sub OnloanTypeChanging(value As String)
    End Sub
    Partial Private Sub OnloanTypeChanged()
    End Sub
    Partial Private Sub OnamountBorrowedChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnamountBorrowedChanged()
    End Sub
    Partial Private Sub OnaccountIDChanging(value As String)
    End Sub
    Partial Private Sub OnaccountIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Account = CType(Nothing, EntityRef(Of Account))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_loanID", DbType:="VarChar(6) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property loanID() As String
		Get
			Return Me._loanID
		End Get
		Set
			If (String.Equals(Me._loanID, value) = false) Then
				Me.OnloanIDChanging(value)
				Me.SendPropertyChanging
				Me._loanID = value
				Me.SendPropertyChanged("loanID")
				Me.OnloanIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_loanType", DbType:="VarChar(10)")>  _
	Public Property loanType() As String
		Get
			Return Me._loanType
		End Get
		Set
			If (String.Equals(Me._loanType, value) = false) Then
				Me.OnloanTypeChanging(value)
				Me.SendPropertyChanging
				Me._loanType = value
				Me.SendPropertyChanged("loanType")
				Me.OnloanTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_amountBorrowed", DbType:="Decimal(7,2)")>  _
	Public Property amountBorrowed() As System.Nullable(Of Decimal)
		Get
			Return Me._amountBorrowed
		End Get
		Set
			If (Me._amountBorrowed.Equals(value) = false) Then
				Me.OnamountBorrowedChanging(value)
				Me.SendPropertyChanging
				Me._amountBorrowed = value
				Me.SendPropertyChanged("amountBorrowed")
				Me.OnamountBorrowedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="VarChar(6)")>  _
	Public Property accountID() As String
		Get
			Return Me._accountID
		End Get
		Set
			If (String.Equals(Me._accountID, value) = false) Then
				If Me._Account.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnaccountIDChanging(value)
				Me.SendPropertyChanging
				Me._accountID = value
				Me.SendPropertyChanged("accountID")
				Me.OnaccountIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Account_Loan", Storage:="_Account", ThisKey:="accountID", OtherKey:="accountID", IsForeignKey:=true)>  _
	Public Property Account() As Account
		Get
			Return Me._Account.Entity
		End Get
		Set
			Dim previousValue As Account = Me._Account.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Account.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Account.Entity = Nothing
					previousValue.Loans.Remove(Me)
				End If
				Me._Account.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Loans.Add(Me)
					Me._accountID = value.accountID
				Else
					Me._accountID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Account")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Payment")>  _
Partial Public Class Payment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _paymentID As String
	
	Private _paymentType As String
	
	Private _senderName As String
	
	Private _receiveName As String
	
	Private _paymentDate As System.Nullable(Of Date)
	
	Private _custID As String
	
	Private _Customer As EntityRef(Of Customer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnpaymentIDChanging(value As String)
    End Sub
    Partial Private Sub OnpaymentIDChanged()
    End Sub
    Partial Private Sub OnpaymentTypeChanging(value As String)
    End Sub
    Partial Private Sub OnpaymentTypeChanged()
    End Sub
    Partial Private Sub OnsenderNameChanging(value As String)
    End Sub
    Partial Private Sub OnsenderNameChanged()
    End Sub
    Partial Private Sub OnreceiveNameChanging(value As String)
    End Sub
    Partial Private Sub OnreceiveNameChanged()
    End Sub
    Partial Private Sub OnpaymentDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnpaymentDateChanged()
    End Sub
    Partial Private Sub OncustIDChanging(value As String)
    End Sub
    Partial Private Sub OncustIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Customer = CType(Nothing, EntityRef(Of Customer))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentID", DbType:="VarChar(6) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property paymentID() As String
		Get
			Return Me._paymentID
		End Get
		Set
			If (String.Equals(Me._paymentID, value) = false) Then
				Me.OnpaymentIDChanging(value)
				Me.SendPropertyChanging
				Me._paymentID = value
				Me.SendPropertyChanged("paymentID")
				Me.OnpaymentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentType", DbType:="VarChar(20)")>  _
	Public Property paymentType() As String
		Get
			Return Me._paymentType
		End Get
		Set
			If (String.Equals(Me._paymentType, value) = false) Then
				Me.OnpaymentTypeChanging(value)
				Me.SendPropertyChanging
				Me._paymentType = value
				Me.SendPropertyChanged("paymentType")
				Me.OnpaymentTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_senderName", DbType:="VarChar(40)")>  _
	Public Property senderName() As String
		Get
			Return Me._senderName
		End Get
		Set
			If (String.Equals(Me._senderName, value) = false) Then
				Me.OnsenderNameChanging(value)
				Me.SendPropertyChanging
				Me._senderName = value
				Me.SendPropertyChanged("senderName")
				Me.OnsenderNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_receiveName", DbType:="VarChar(40)")>  _
	Public Property receiveName() As String
		Get
			Return Me._receiveName
		End Get
		Set
			If (String.Equals(Me._receiveName, value) = false) Then
				Me.OnreceiveNameChanging(value)
				Me.SendPropertyChanging
				Me._receiveName = value
				Me.SendPropertyChanged("receiveName")
				Me.OnreceiveNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentDate", DbType:="Date")>  _
	Public Property paymentDate() As System.Nullable(Of Date)
		Get
			Return Me._paymentDate
		End Get
		Set
			If (Me._paymentDate.Equals(value) = false) Then
				Me.OnpaymentDateChanging(value)
				Me.SendPropertyChanging
				Me._paymentDate = value
				Me.SendPropertyChanged("paymentDate")
				Me.OnpaymentDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_custID", DbType:="VarChar(6)")>  _
	Public Property custID() As String
		Get
			Return Me._custID
		End Get
		Set
			If (String.Equals(Me._custID, value) = false) Then
				If Me._Customer.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OncustIDChanging(value)
				Me.SendPropertyChanging
				Me._custID = value
				Me.SendPropertyChanged("custID")
				Me.OncustIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_Payment", Storage:="_Customer", ThisKey:="custID", OtherKey:="custID", IsForeignKey:=true)>  _
	Public Property Customer() As Customer
		Get
			Return Me._Customer.Entity
		End Get
		Set
			Dim previousValue As Customer = Me._Customer.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Customer.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Customer.Entity = Nothing
					previousValue.Payments.Remove(Me)
				End If
				Me._Customer.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Payments.Add(Me)
					Me._custID = value.custID
				Else
					Me._custID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Customer")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Staff")>  _
Partial Public Class Staff
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _staffID As String
	
	Private _staffName As String
	
	Private _password As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnstaffIDChanging(value As String)
    End Sub
    Partial Private Sub OnstaffIDChanged()
    End Sub
    Partial Private Sub OnstaffNameChanging(value As String)
    End Sub
    Partial Private Sub OnstaffNameChanged()
    End Sub
    Partial Private Sub OnpasswordChanging(value As String)
    End Sub
    Partial Private Sub OnpasswordChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffID", DbType:="VarChar(6) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property staffID() As String
		Get
			Return Me._staffID
		End Get
		Set
			If (String.Equals(Me._staffID, value) = false) Then
				Me.OnstaffIDChanging(value)
				Me.SendPropertyChanging
				Me._staffID = value
				Me.SendPropertyChanged("staffID")
				Me.OnstaffIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffName", DbType:="VarChar(50)")>  _
	Public Property staffName() As String
		Get
			Return Me._staffName
		End Get
		Set
			If (String.Equals(Me._staffName, value) = false) Then
				Me.OnstaffNameChanging(value)
				Me.SendPropertyChanging
				Me._staffName = value
				Me.SendPropertyChanged("staffName")
				Me.OnstaffNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_password", DbType:="VarChar(20)")>  _
	Public Property password() As String
		Get
			Return Me._password
		End Get
		Set
			If (String.Equals(Me._password, value) = false) Then
				Me.OnpasswordChanging(value)
				Me.SendPropertyChanging
				Me._password = value
				Me.SendPropertyChanged("password")
				Me.OnpasswordChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TransactionH")>  _
Partial Public Class TransactionH
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _transactionID As String
	
	Private _date As System.Nullable(Of Date)
	
	Private _amount As System.Nullable(Of Decimal)
	
	Private _transactionType As String
	
	Private _accountID As String
	
	Private _Account As EntityRef(Of Account)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OntransactionIDChanging(value As String)
    End Sub
    Partial Private Sub OntransactionIDChanged()
    End Sub
    Partial Private Sub OndateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndateChanged()
    End Sub
    Partial Private Sub OnamountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnamountChanged()
    End Sub
    Partial Private Sub OntransactionTypeChanging(value As String)
    End Sub
    Partial Private Sub OntransactionTypeChanged()
    End Sub
    Partial Private Sub OnaccountIDChanging(value As String)
    End Sub
    Partial Private Sub OnaccountIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Account = CType(Nothing, EntityRef(Of Account))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_transactionID", DbType:="VarChar(6) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property transactionID() As String
		Get
			Return Me._transactionID
		End Get
		Set
			If (String.Equals(Me._transactionID, value) = false) Then
				Me.OntransactionIDChanging(value)
				Me.SendPropertyChanging
				Me._transactionID = value
				Me.SendPropertyChanged("transactionID")
				Me.OntransactionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="date", Storage:="_date", DbType:="Date")>  _
	Public Property [date]() As System.Nullable(Of Date)
		Get
			Return Me._date
		End Get
		Set
			If (Me._date.Equals(value) = false) Then
				Me.OndateChanging(value)
				Me.SendPropertyChanging
				Me._date = value
				Me.SendPropertyChanged("[date]")
				Me.OndateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_amount", DbType:="Decimal(7,2)")>  _
	Public Property amount() As System.Nullable(Of Decimal)
		Get
			Return Me._amount
		End Get
		Set
			If (Me._amount.Equals(value) = false) Then
				Me.OnamountChanging(value)
				Me.SendPropertyChanging
				Me._amount = value
				Me.SendPropertyChanged("amount")
				Me.OnamountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_transactionType", DbType:="VarChar(10)")>  _
	Public Property transactionType() As String
		Get
			Return Me._transactionType
		End Get
		Set
			If (String.Equals(Me._transactionType, value) = false) Then
				Me.OntransactionTypeChanging(value)
				Me.SendPropertyChanging
				Me._transactionType = value
				Me.SendPropertyChanged("transactionType")
				Me.OntransactionTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="VarChar(6)")>  _
	Public Property accountID() As String
		Get
			Return Me._accountID
		End Get
		Set
			If (String.Equals(Me._accountID, value) = false) Then
				If Me._Account.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnaccountIDChanging(value)
				Me.SendPropertyChanging
				Me._accountID = value
				Me.SendPropertyChanged("accountID")
				Me.OnaccountIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Account_TransactionH", Storage:="_Account", ThisKey:="accountID", OtherKey:="accountID", IsForeignKey:=true)>  _
	Public Property Account() As Account
		Get
			Return Me._Account.Entity
		End Get
		Set
			Dim previousValue As Account = Me._Account.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Account.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Account.Entity = Nothing
					previousValue.TransactionHs.Remove(Me)
				End If
				Me._Account.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TransactionHs.Add(Me)
					Me._accountID = value.accountID
				Else
					Me._accountID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Account")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
